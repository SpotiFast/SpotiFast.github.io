<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lösungstrategie on SpotiFast Dokumentation (SWE2 2022)</title>
    <link>https://spotifast.github.io/04_loesungsstrategie/</link>
    <description>Recent content in Lösungstrategie on SpotiFast Dokumentation (SWE2 2022)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>de-de</language>
    
	<atom:link href="https://spotifast.github.io/04_loesungsstrategie/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Einstieg</title>
      <link>https://spotifast.github.io/04_loesungsstrategie/01_einstieg/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://spotifast.github.io/04_loesungsstrategie/01_einstieg/</guid>
      <description>4.1 Einstieg in die Lösungsstrategie Die folgende Tabelle stellt die Qualitätsziele von SpotiFast (→ 1.2 „Qualitätsziele“) passenden Architekturansätzen gegenüber, und erleichtert so einen Einstieg in die Lösung.
   Qualitätsziel Dem zuträgliche Ansätze in der Architektur     Einladende App Hierbei ist es wichtig, dass die App einfach zu bedienen ist und eine gute Usability bietet. Dazu gehört auch, dass die App intuitiv zu bedienen ist und keine unnötigen Schritte erfordert.</description>
    </item>
    
    <item>
      <title>Aufbau</title>
      <link>https://spotifast.github.io/04_loesungsstrategie/02_aufbau/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://spotifast.github.io/04_loesungsstrategie/02_aufbau/</guid>
      <description>4.2 Der Aufbau von SpotiFast 4.2.1 Der Server Serverseitig soll SpotiFast in der Sprache Python realisiert werden. Der Server besteht aus zwei Teilen:
         API Anfragen der Clientseite entgegennehmen und Daten aus der Datenbank lesen/schreiben   Datenbank (DBMS - Postgres) Daten der Songs und der Route speichern    4.2.2 Der Client Die Clientseite soll in Dart realisiert werden, mit dem Framework Flutter.</description>
    </item>
    
    <item>
      <title>SpotiFast API</title>
      <link>https://spotifast.github.io/04_loesungsstrategie/03_spotifastapi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://spotifast.github.io/04_loesungsstrategie/03_spotifastapi/</guid>
      <description>4.3 Die SpotiFast API Die SpotiFast API auf dem Server wird in Python mit der Bibliothek &amp;ldquo;Flask&amp;rdquo; implementiert. Sie empfängt Anfragen von der Clientseite und holt die dazugehörigen Daten aus der Datenbank ab.
Eine Fassade kann in diesem Fall sinnvoll sein, da sie als Schnittstelle dient, über die verschiedene Funktionen aufgerufen werden können, die entweder Daten aus der Datenbank abrufen oder an den Client senden.</description>
    </item>
    
  </channel>
</rss>