<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Querschnittliche Konzepte on SpotiFast Dokumentation (SWE2 2022)</title>
    <link>https://spotifast.github.io/08_konzepte/</link>
    <description>Recent content in Querschnittliche Konzepte on SpotiFast Dokumentation (SWE2 2022)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>de-de</language>
    
	<atom:link href="https://spotifast.github.io/08_konzepte/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Automatisierte Tests</title>
      <link>https://spotifast.github.io/08_konzepte/01_test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://spotifast.github.io/08_konzepte/01_test/</guid>
      <description>8.1.1 Server Tests Der Server wurde in im Editor Visual Studio Code geschrieben. Damit ist es möglich, den Code zu testen und mit der Erweiterung Test grafisch dar zu stellen. Die Test befinden sich im Ordner &amp;lsquo;/scr&amp;rsquo;.
Test der Datenbank und der JSONValidation Es werden bei der Datenbank getestet, ob das Hinzufügen der Daten wie geplant funktioniert. Hierzu wird eine Mataklasse erstellt, die die Datenbankverbindung herstellt. Diese Klasse wird in den Testklassen verwendet.</description>
    </item>
    
    <item>
      <title>Validierung</title>
      <link>https://spotifast.github.io/08_konzepte/02_validierung/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://spotifast.github.io/08_konzepte/02_validierung/</guid>
      <description>8.2 Validierung In diesem Abschnitt wird auf die Validierung eingegangen, beispielhaft wird die Validierung des Frames gezeigt.
Der Konstruktor der JSONValidator-Klasse erwartet als Parameter einen String, der den Pfad zur JSON-Schema-Datei enthält. Die den Json als Dictionary, welche überprüft werden soll, sowie das Passwort, welches für die Verschlüsselung verwendet wurde. Außerdem die Version des Frames, die überprüft werden soll.
Password und Version sind optionale Parametrer. Wenn diese nicht angegeben werden, entfällt die Überprüfung des Passworts und der Version.</description>
    </item>
    
    <item>
      <title>SQLAlchemyAutoSchema</title>
      <link>https://spotifast.github.io/08_konzepte/03_sqlalchemyautoschema/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://spotifast.github.io/08_konzepte/03_sqlalchemyautoschema/</guid>
      <description>8.3 SQLAlchemyAutoSchema In diesem Abschnitt wird auf das SQLAlchemyAutoSchema eingegangen. Dieses Schema wird verwendet, um die Datenbanktabellen in JSON-Schemas zu übersetzen. Dieses ist nützlich, weil einige Anfragen vom Client kommen um zum Beispiel alle Positionen einer Route zu erhalten.
Beispiel anhand /getRoute/{routeId} Es folgt ein Beispiel mit einem Code Ausschnitt, wie das Schema für die Route erstellt wird.
class PositionSchemaWithoutRoute(SQLAlchemyAutoSchema): class Meta: model = Position load_instance = True include_relationships = True exclude = (&amp;quot;route&amp;quot;,)  Hierbei werden nun alle Attribute der Position ausgelesen und in das Schema geschrieben.</description>
    </item>
    
    <item>
      <title>Flutter</title>
      <link>https://spotifast.github.io/08_konzepte/05_flutter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://spotifast.github.io/08_konzepte/05_flutter/</guid>
      <description>8.5 Flutter Die SpotiFast App wird in dem Framework Flutter und in der Programmiersprache Dart geschrieben. Dementsprechend werden auch die Konzepte von Flutter und Dart angewendet.
Die Oberfläche ist aus Widgets aufgebaut, die ineinander geschachtelt sind. Ein Widget beschreibt, wie seine Oberfläche aussehen soll. Zur Verschachtelung und Übergabe von anderen Widgets, den Kinder Widgets, wird die build-Methode überschrieben. Darin werden die Kinder Widgets aufgerufen und gebaut. Allgemein gibt es eine Unterscheidung zwischen Stateless und Stateful Widgets.</description>
    </item>
    
    <item>
      <title>Benutzungsoberfläche</title>
      <link>https://spotifast.github.io/08_konzepte/06_benutzungsoberfl%C3%A4che/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://spotifast.github.io/08_konzepte/06_benutzungsoberfl%C3%A4che/</guid>
      <description>8.6 Benutzungsoberfläche Bei der Gestaltung der Benutzungsoberfläche wurde darauf geachtet sie ähnlich wie andere Apps zu gestalten, um die Bedienung zu erleichtern. Dafür wurden apptypische Bedienungselemente verwendet. Wie in der Graphik unten zu erkennen ist, gibt es im unteren Teil der Oberfläche eine Leiste, in welcher zwischen den verschiedenen Seiten gewechselt werden kann, wie man es beispielsweise auch von Apps wie Instagram und ähnlichem kennt. Des Weiteren gibt es oben links in der Ecke einen Button, mit welchem sich eine Liste an Auswählmöglichkeiten öffnet.</description>
    </item>
    
    <item>
      <title>Secrets / Tokens im Repo</title>
      <link>https://spotifast.github.io/08_konzepte/07_repo_templates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://spotifast.github.io/08_konzepte/07_repo_templates/</guid>
      <description>8.7 Secrets / Tokens im Repo An einigen Stellen im Projekt ist es notwendig, Secrets, Tokens, Passwörter oder andere &amp;ldquo;geheime&amp;rdquo; Informationen im Code zu nutzen.
Damit diese Informationen einfach im Quellcode eingebunden werden können, ohne dass sie im Repo landen, werden .template Dateien verwendet.
  secret_password.py.template   secret_password.py     password: str = &#34;INSERT-PASSWORD-HERE&#34;    ist im Repo eingecheckt   password: str = &#34;</description>
    </item>
    
  </channel>
</rss>