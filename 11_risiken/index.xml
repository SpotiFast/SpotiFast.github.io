<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Risiken on SpotiFast Dokumentation (SWE2 2022)</title>
    <link>https://spotifast.github.io/11_risiken/</link>
    <description>Recent content in Risiken on SpotiFast Dokumentation (SWE2 2022)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>de-de</language>
    
	<atom:link href="https://spotifast.github.io/11_risiken/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Sicherheit</title>
      <link>https://spotifast.github.io/11_risiken/01_sicherheit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://spotifast.github.io/11_risiken/01_sicherheit/</guid>
      <description>11.1 Risiko: Sicherheit an API Das Risiko der Sicherheit an der API ist sehr hoch, da die API von außen erreichbar ist. Es ist daher wichtig, dass die API nur von vertrauenswürdigen Quellen erreichbar ist. Es wird nun eine minimale Authentifizierung eingeführt, um die Sicherheit zu erhöhen. Bei den Frames die an die API gesendet werden, wird ein Passwort mitgeschickt. Dieses Passwort ist Server- und Client-seitig gespeichert. Beim Empfangen der Frames wird das Passwort mit dem gespeicherten Passwort verglichen.</description>
    </item>
    
    <item>
      <title>Aufwand</title>
      <link>https://spotifast.github.io/11_risiken/02_aufwand/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://spotifast.github.io/11_risiken/02_aufwand/</guid>
      <description>11.2 Risiko: Aufwand der Implementierung zu hoch Es liegt keinerlei Erfahrung mit der Schachprogrammierung vor. Gleichzeitig wirken die Spielregeln, die wir komplett realisieren sollen (vgl. Aufgabenstellung), umfangreich und kompliziert. Die Figurenarten ziehen unterschiedlich, hinzu kommen Spezialregeln wie Patt und Umwandlung. Bei Rochade und en passant ist die Partiehistorie, und nicht nur die aktuelle Situation auf dem Brett relevant.
Die Programmierung der Algorithmen ist ebenfalls nicht-trivial. Für die Anbindung von Eröffnungsbibliotheken und Endspieldatenbanken ist eine umfangreiche Recherche erforderlich.</description>
    </item>
    
    <item>
      <title>Spielstärke</title>
      <link>https://spotifast.github.io/11_risiken/03_spielstaerke/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://spotifast.github.io/11_risiken/03_spielstaerke/</guid>
      <description>11.3 Risiko: Erreichen der Spielstärke scheitert Die Qualitätsziele fordern sowohl eine akzeptable Spielstärke wie auch eine einfache, leicht zugängliche Lösung. Zudem gibt es Anforderungen bezüglich Effizienz. Es ist unsicher, ob die anvisierte Java-Lösung mit objektorientiertem Domänenmodell und einfacher Zugauswahl diese konkurrierenden Ziele erreichen kann.
Das Risiko manifestiert sich durch zu schlechte Spielstärke, zu lange Wartezeiten oder beides. Insbesondere bei Live-Vorführungen in Vorträgen wäre das unschön, da die Zuhörer die Lösung dann gar nicht als solche wahrnehmen (sondern als Spielerei).</description>
    </item>
    
  </channel>
</rss>