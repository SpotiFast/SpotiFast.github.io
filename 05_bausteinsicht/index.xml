<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bausteinsicht on SpotiFast Dokumentation (SWE2 2022)</title>
    <link>https://spotifast.github.io/05_bausteinsicht/</link>
    <description>Recent content in Bausteinsicht on SpotiFast Dokumentation (SWE2 2022)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>de-de</language>
    
	<atom:link href="https://spotifast.github.io/05_bausteinsicht/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Überblick der Architektur</title>
      <link>https://spotifast.github.io/05_bausteinsicht/01_ueberblick/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://spotifast.github.io/05_bausteinsicht/01_ueberblick/</guid>
      <description>5.1 Überblick der Architektur Wie bereits aus der Kontextabgrenzung hervorgeht, lässt sich die SpotiFast Architektur in die zwei Bausteine &amp;ldquo;Client&amp;rdquo; und &amp;ldquo;Server&amp;rdquo; aufteilen. Im nachfolgenden Komponentendiagramm ist diese Architektur detaillierter dargestellt.
Bild: Übersicht der SpotiFast Architektur
Der Client besteht aus Model und View, wobei das Model die Aufgabe besitzt, mit anderen Komponenten des Systems zu kommunizieren. (→ 4.2.2 „Der Client“). Die Schnittstelle zu Spotify ist über die Developer API von Spotify realisiert und wird vom Model aus aufgerufen.</description>
    </item>
    
    <item>
      <title>Aufbau View</title>
      <link>https://spotifast.github.io/05_bausteinsicht/02_view/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://spotifast.github.io/05_bausteinsicht/02_view/</guid>
      <description>5.2 Aufbau View 5.2.1 Appoberfläche Die Appoberfläche ist in verschiedene Seiten unterteilt. Diese werden von der Klasse MyApp abhängig davon aufgerufen, ob der Benutzer eingeloggt ist oder nicht. Wenn er eingeloggt ist, wird über die untere Auswahlleiste, die BottomNavbar, bestimmt, welche Seite sich öffnen soll. Per Default öffnet sich die erste Seite, die MapPage Seite. Der Benutzer kann durch dem Betätigen der BottomNavBar zwischen den verschiedenen Seiten wechseln.
Klassendiagramm der verschiedenen Seiten der Oberfläche</description>
    </item>
    
    <item>
      <title>Aufbau Model</title>
      <link>https://spotifast.github.io/05_bausteinsicht/03_model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://spotifast.github.io/05_bausteinsicht/03_model/</guid>
      <description>5.3 Aufbau Model Der interne Aufbau des Models ist im folgenden Klassendiagramm dargestellt. Das Klassendiagramm ist vereinfacht und dient der Verdeutlichung der Beziehungen zwischen den Klassen.
Ein detaillierte Beschreibung der Funktionalität ist dem Abschnitt → 6. „Laufzeitsicht“ zu entnehmen.
Bild: Klassendiagramm des Models
Neben den &amp;ldquo;aktiven&amp;rdquo; Klassen des Models werden auch die Routen und Frames durch Klassen repräsentiert. Diese dienen vor allem der übersichtlichen Weitergabe von Daten zwischen Methoden.</description>
    </item>
    
    <item>
      <title>Aufbau API</title>
      <link>https://spotifast.github.io/05_bausteinsicht/04_aufbau_api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://spotifast.github.io/05_bausteinsicht/04_aufbau_api/</guid>
      <description>5.4 Aufbau API Im der folgenden Darstellung wird der Aufbau der API Zugriffe beschrieben.
Bild: API Zugriffe
Der APIFassade-Klasse werden von der API Funktionen zugewiesen, die aufgerufen werden. In der untenstehenden Tabelle sind alle URLs aufgelistet, die von der API bereitgestellt werden. Die APIFassade befindet sich in src/API/allAPI.py und kann direkt auf die Datenbank zugreifen oder Daten in die Datenbank schreiben. Wenn die Funktion addFrame aufgerufen wird, wird die Hilfsklasse FrameManager verwendet, um zu überprüfen, ob das Json-Schema korrekt ist.</description>
    </item>
    
    <item>
      <title>Aufbau Datenbank</title>
      <link>https://spotifast.github.io/05_bausteinsicht/05_aufbau_datenbank/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://spotifast.github.io/05_bausteinsicht/05_aufbau_datenbank/</guid>
      <description>5.5 Aufbau Datenbank Bild: Physisches Schema der Datenbank
Im Folgenden wird das physische Schema der Datenbank beschrieben. Die Datenbank besteht aus 3 Tabellen, welche in der Abbildung dargestellt sind. Die Tabellen werden im Folgenden beschrieben.
Tabelle user Die Tabelle user enthält die Daten der Benutzer. Die Daten sind die UserId und das Land des Benutzers. Die UserId ist der Primärschlüssel der Tabelle. Die UserId wird von Spotify vergeben und ist eindeutig.</description>
    </item>
    
  </channel>
</rss>